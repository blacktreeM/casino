if(F){
  library(tidyr); library(dplyr); library(zipcodeR)
  # https://www.irs.gov/statistics/soi-tax-stats-individual-income-tax-statistics-zip-code-data-soi
  (files = paste0('C:/Users/masan/Desktop/IRS/', 11:22, 'zpallagi.csv'))
  all_data = lapply(files, function(path) {
    df = read.csv(path)
    df = df %>% filter(STATE == 'AR')
    colnames(df) = tolower(colnames(df))
    two_digit_year = gsub(".*?(\\d{2}).*", "\\1", basename(path))
    four_digit_year = as.integer(paste0("20", two_digit_year))
    df$year = four_digit_year
    return(df)
  })
  data = bind_rows(all_data); table(data$year)
  zip_lookup = reverse_zipcode(data$zipcode) %>% select(zipcode, major_city, county) %>% distinct() %>% 
    mutate(zipcode = as.integer(zipcode)) %>% rename('city' = 'major_city'); head(zip_lookup)
  zip_lookup %>% arrange(city) %>% unique() %>% print(n=500)
  data = data %>% select(zipcode, agi_stub, n1, a00100, a00200, n00200, year); head(data); summary(data)
  data %>% filter(zipcode %in% c(72801, 72802) & year==2022)
  # n1 number of returns
  # a00100 adjust gross income
  # a00200 salaries and wages amount
  data = data %>% rename('income' = 'a00100', 'wages_n' = 'n00200', 'wages' = 'a00200'); head(data)
  ar = data %>% filter(zipcode=='0') %>% group_by(year) %>% 
    summarise(n1 = sum(n1), income = sum(income), wages = sum(wages), wages_n = sum(wages_n)) %>% ungroup() %>% 
    mutate(per_income = 1000*income/n1, per_wage = 1000*wages/wages_n); ar
  save(ar, file = 'C:/Users/masan/Desktop/IRS/AR.RDa')
  data = data %>% left_join(zip_lookup, by = "zipcode") #%>% filter(agi_stub!=6)#exclude the richest
  #1 = $1 under $25,000
  #2 = $25,000 under $50,000
  #3 = $50,000 under $75,000
  #4 = $75,000 under $100,000
  #5 = $100,000 under $200,000
  #6 = $200,000 or more
  irs_city = data %>% group_by(year, city) %>% 
    summarise(n1 = sum(n1), income = sum(income), wages = sum(wages), wages_n = sum(wages_n)) %>% ungroup() %>% 
    mutate(per_income = 1000*income/n1, per_wage = 1000*wages/wages_n,
           city = ifelse(city=='Hot Springs National Park', 'Hot Springs', city))
  subset(irs_city, city=='Russellville'); subset(irs_city, city=='Hot Springs')
  irs_county = data %>% group_by(year, county) %>% 
    summarise(n1 = sum(n1), income = sum(income), wages = sum(wages), wages_n = sum(wages_n)) %>% ungroup() %>% 
    mutate(per_income = 1000*income/n1, per_wage = 1000*wages/wages_n)
  subset(irs_county, county=='Pope County')
  ### city ACS
  key = '60afb8b8550abb1dc40fef1e46bf9c492b1dc98d'
  library(tidycensus); library(dplyr); library(tidyr)
  census_api_key(key, install=T, overwrite = T)
  acs =  function(year){
    get_acs(geography = "place", state = "AR",
            variables = c(income = 'B19013_001', employed = 'B23025_004', unemployed = 'B23025_005',
                          pop = 'B03002_001', black = 'B03002_004', hispanic = 'B03002_012', 
                          male = 'B15002_002', ns1 = 'B15002_003',
                          ns2 = 'B15002_004', ns3 = 'B15002_005',
                          ns4 = 'B15002_006', ns5 = 'B15002_007', 
                          ns6 = 'B15002_008', ns7 = 'B15002_009',
                          ns8 = 'B15002_010', collegeM = 'B15002_015',
                          masterM = 'B15002_016', profM = 'B15002_017',
                          doctorM = 'B15002_018', 
                          female = 'B15002_019', nsf1 = 'B15002_020',
                          nsf2 = 'B15002_021', nsf3 = 'B15002_022',
                          nsf4 = 'B15002_023', nsf5 = 'B15002_024', 
                          nsf6 = 'B15002_025', nsf7 = 'B15002_026',
                          nsf8 = 'B15002_027', collegeF = 'B15002_032',
                          masterF = 'B15002_033', profF = 'B15002_034',
                          doctorF = 'B15002_035',
                          pop16 = 'DP03_0001',
                          lf = 'DP03_0003',
                          pop_foreign = 'DP02_0088',
                          foreign = 'DP02_0094',
                          men = 'DP02_0025',
                          men_marry = 'DP02_0027',
                          women = 'DP02_0031',
                          women_marry = 'DP02_0033',
                          age_pop = 'DP05_0001',
                          old = 'DP05_0024',
                          young = 'DP05_0019',
                          median_age = 'DP05_0018'),
            year = year)  %>% select(-moe) %>% 
      rename('fips' = 'GEOID', 'city' = 'NAME') %>% 
      pivot_wider(names_from = variable, values_from = estimate)%>% 
      mutate(fips = as.numeric(fips), 
             edu = 100*(collegeM + masterM + profM + doctorM+collegeF + masterF + profF +  doctorF)/(male+female),
             drop=100*(ns1+ns2+ns3+ns4+ns5+ns6+ns7+ns8+nsf1+nsf2+nsf3+nsf4+nsf5+nsf6+nsf7+nsf8)/(male+female),
             edu_male = 100*(collegeM + masterM + profM + doctorM)/male,
             edu_female = 100*(collegeF + masterF + profF +  doctorF)/female,
             drop_male = 100*(ns1+ns2+ns3+ns4+ns5+ns6+ns7+ns8)/male,
             drop_female = 100*(nsf1+nsf2+nsf3+nsf4+nsf5+nsf6+nsf7+nsf8)/female) %>% 
      mutate(men_married = 100*men_marry/men,
             women_married = 100*women_marry/women,
             young = 100*young/age_pop, old = 100*old/age_pop,
             lfp = 100*lf/pop16, 
             foreign = 100*foreign/pop_foreign,
             black = 100*black/pop, hispanic = 100*hispanic/pop,
             unemployed = 100*unemployed / (employed + unemployed),
             year = year)
  }
  acs16 = acs(2016)
  acs17 = acs(2017)
  acs18 = acs(2018)
  acs = rbind(acs17, acs18) # 2016 acs different variables
  city = acs %>% mutate(city = gsub(', Arkansas', '', city), city = gsub(' city| town', '', city)); unique(city$city)
  setdiff(unique(irs_city$city), unique(city$city))
  # ACS county
  acs =  function(year){
    get_acs(geography = "county", state = "AR",
            variables = c(income = 'B19013_001', employed = 'B23025_004', unemployed = 'B23025_005',
                          pop = 'B03002_001', black = 'B03002_004', hispanic = 'B03002_012', 
                          male = 'B15002_002', ns1 = 'B15002_003',
                          ns2 = 'B15002_004', ns3 = 'B15002_005',
                          ns4 = 'B15002_006', ns5 = 'B15002_007', 
                          ns6 = 'B15002_008', ns7 = 'B15002_009',
                          ns8 = 'B15002_010', collegeM = 'B15002_015',
                          masterM = 'B15002_016', profM = 'B15002_017',
                          doctorM = 'B15002_018', 
                          female = 'B15002_019', nsf1 = 'B15002_020',
                          nsf2 = 'B15002_021', nsf3 = 'B15002_022',
                          nsf4 = 'B15002_023', nsf5 = 'B15002_024', 
                          nsf6 = 'B15002_025', nsf7 = 'B15002_026',
                          nsf8 = 'B15002_027', collegeF = 'B15002_032',
                          masterF = 'B15002_033', profF = 'B15002_034',
                          doctorF = 'B15002_035',
                          pop16 = 'DP03_0001',
                          lf = 'DP03_0003',
                          pop_foreign = 'DP02_0088',
                          foreign = 'DP02_0094',
                          men = 'DP02_0025',
                          men_marry = 'DP02_0027',
                          women = 'DP02_0031',
                          women_marry = 'DP02_0033',
                          age_pop = 'DP05_0001',
                          old = 'DP05_0024',
                          young = 'DP05_0019',
                          median_age = 'DP05_0018'),
            year = year)  %>% select(-moe) %>% 
      rename('fips' = 'GEOID', 'county' = 'NAME') %>% 
      pivot_wider(names_from = variable, values_from = estimate)%>% 
      mutate(fips = as.numeric(fips), 
             edu = 100*(collegeM + masterM + profM + doctorM+collegeF + masterF + profF +  doctorF)/(male+female),
             drop=100*(ns1+ns2+ns3+ns4+ns5+ns6+ns7+ns8+nsf1+nsf2+nsf3+nsf4+nsf5+nsf6+nsf7+nsf8)/(male+female),
             edu_male = 100*(collegeM + masterM + profM + doctorM)/male,
             edu_female = 100*(collegeF + masterF + profF +  doctorF)/female,
             drop_male = 100*(ns1+ns2+ns3+ns4+ns5+ns6+ns7+ns8)/male,
             drop_female = 100*(nsf1+nsf2+nsf3+nsf4+nsf5+nsf6+nsf7+nsf8)/female) %>% 
      mutate(men_married = 100*men_marry/men,
             women_married = 100*women_marry/women,
             young = 100*young/age_pop, old = 100*old/age_pop,
             lfp = 100*lf/pop16, 
             foreign = 100*foreign/pop_foreign,
             black = 100*black/pop, hispanic = 100*hispanic/pop,
             unemployed = 100*unemployed / (employed + unemployed),
             year = year)
  }
  acs16 = acs(2016)
  acs17 = acs(2017)
  acs18 = acs(2018)
  acs = rbind(acs17, acs18)
  county = acs %>% mutate(county = gsub(', Arkansas', '', county)); unique(county$county)
  setdiff(unique(irs_county$county), unique(county$county))
  data_city = irs_city %>% left_join(city, by = c('city', 'year')) %>% filter(!is.na(city)); unique(data_city$city)
  data_county = irs_county %>% left_join(county, by = c('county', 'year')) %>% filter(!is.na(county)); unique(data_county$county)
  table(data_city$year); table(data_county$year)
  save(data_city, file = 'C:/Users/masan/Desktop/IRS/data_city.RDa')
  save(data_county, file = 'C:/Users/masan/Desktop/IRS/data_county.RDa')
}
#################################
library(tidysynth); library(ggplot2); library(htmlTable); library(dplyr); library(tidyr); library(patchwork)
load('C:/Users/masan/Desktop/IRS/data_county.RDa'); data = data_city
unique(data$city); summary(data)
(cities_to_remove = data %>% filter(year == 2018, is.na(pop)) %>% pull(city))
data = data %>% filter(!city %in% cities_to_remove)
(top99 = data %>% filter(year==2018 & !(city %in% c('Hot Springs', 'Pine Bluff', 'West Memphis'))) %>% 
    arrange(desc(wages_n)) %>% select(city) %>% head(99)) # to make it 99 control + 1 treated = 100
data = data %>% filter(city %in% top99$city | city %in% c('Hot Springs', 'Pine Bluff', 'West Memphis')) %>% 
  select(year, city, n1, per_income, per_wage, unemployed, edu, old, young, lfp, black, hispanic, pop); unique(data$city)
table(data$city)
city_sc = function(treated, exclude, time, period, placebo) {
  data %>% filter(!(city %in% exclude)) %>% 
    synthetic_control(outcome = per_wage, 
                      unit = city, 
                      time = year, 
                      i_unit = treated, 
                      i_time = time,
                      generate_placebos=F) %>%
    generate_predictor(time_window = 2017:2018,
                       unemployed = mean(unemployed, na.rm = T),
                       edu = mean(edu, na.rm = T),
                       old = mean(old, na.rm = T),
                       young = mean(young, na.rm = T),
                       lfp = mean(lfp, na.rm= T),
                       black = mean(black, na.rm = T),
                       hispanic = mean(hispanic, na.rm = T)) %>%
    generate_predictor(time_window = 2011, value11 = per_wage) %>% 
    generate_predictor(time_window = 2015, value15 = per_wage) %>% 
    generate_predictor(time_window = 2018, value18 = per_wage) %>% 
    generate_weights(optimization_window = period, sigf_ipop = 5) %>% 
    generate_control()
}
hs = city_sc('Hot Springs', c('Pine Bluff', 'West Memphis'), 2019, 2011:2018, T)
wm = city_sc('West Memphis', c('Pine Bluff', 'Hot Springs'), 2019, 2011:2018, F)
pb = city_sc('Pine Bluff', c('West Memphis', 'Hot Springs'), 2020, 2011:2019, F)
control = function(data){
  bind_rows(grab_unit_weights(data, placebo = FALSE) %>% 
              mutate(type = "Control Unit Weights (W)"), grab_predictor_weights(data,placebo = FALSE) %>% 
              rename(unit = variable)) %>% arrange(desc(weight)) %>% 
    mutate(unit = forcats::fct_reorder(unit, weight)) %>% filter(type!= "Variable Weights (V)") %>%
    select(-type) %>% filter(weight>0.01)
}
(hs_control = control(hs) %>% mutate(x = paste0(unit, ' (', round(weight, 3), ')')) %>% pull(x))
(pb_control = control(pb) %>% mutate(y = paste0(unit, ' (', round(weight, 3), ')')) %>% pull(y))
(wm_control = control(wm) %>% mutate(z = paste0(unit, ' (', round(weight, 3), ')')) %>% pull(z))
(hs_control = paste(hs_control, collapse = ', '))
(hs_control = gsub('Dar', '\nDar', hs_control))
(hs_control = gsub('Ris', '\nRis', hs_control))
(pb_control = paste(pb_control, collapse = ', '))
(pb_control = gsub('Ark', '\nArk', pb_control))
(wm_control = paste(wm_control, collapse = ', '))
(wm_control = gsub('Jack', '\nJack', wm_control))

# customzing plot_trends
plot_custom = function (data, time_window = NULL, title) {
  if (!(".meta" %in% colnames(data))) {
    stop("`.meta` column has been removed. `.meta` column needs to be included for `generte_control()` to work.")
  }
  trt_time <- data$.meta[[1]]$treatment_time[1]
  time_index <- data$.meta[[1]]$time_index[1]
  outcome_name <- data$.meta[[1]]$outcome[1]
  if (is.null(time_window)) {
    time_window <- unique(data$.original_data[[1]][[time_index]])
  }
  data %>% grab_synthetic_control(placebo = FALSE) %>% filter(time_unit %in% time_window) %>%
    rename(Synthetic = synth_y,  treated = real_y, year = time_unit) %>%  
    ggplot() + ggtitle(title) +
    geom_vline(xintercept = trt_time, color = "black") +
    scale_y_continuous(name = "", limits = c(25000, 53000)) + 
    scale_x_continuous(name = '', breaks = seq(2011, 2022, 1)) +
    theme_classic() + 
    theme(legend.position = c(0.05, 0.98), 
          legend.justification = c("left", "top"), 
          legend.text = element_text(size = 16),
          legend.background = element_rect(fill = "white", color = "white"), 
    plot.title = element_text(hjust = 0.5, size = 18), 
    plot.caption = element_text(hjust = 0, size = 16))+
    guides(color=guide_legend(title=""))
}
p1 = hs %>% plot_custom(title = 'Hot Springs') + 
  labs(caption = paste('Synthetic Hot Springs:', hs_control)) + 
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic Hot Springs'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'Hot Springs'), linewidth = 1) +
  scale_color_manual(values = c('Hot Springs' = 'black', 'Synthetic Hot Springs' = 'darkgrey'),
                     breaks = c('Hot Springs', 'Synthetic Hot Springs'));p1
p2 = pb %>% plot_custom(title = 'Pine Bluff') + 
  labs(caption = paste('Synthetic Pine Bluff:', pb_control)) + 
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic Pine Bluff'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'Pine Bluff'), linewidth = 1) +
  scale_color_manual(values = c('Pine Bluff' = 'black', 'Synthetic Pine Bluff' = 'darkgrey'),
                     breaks = c('Pine Bluff', 'Synthetic Pine Bluff'));p2
p3 = wm %>% plot_custom(title = 'West Memphis') + 
  labs(caption = paste('Synthetic West Memphis:', wm_control)) + 
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic West Memphis'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'West Memphis'), linewidth = 1) +
  scale_color_manual(values = c('West Memphis' = 'black', 'Synthetic West Memphis' = 'darkgrey'),
                     breaks = c('West Memphis', 'Synthetic West Memphis'));p3
hs %>% plot_differences()
pb %>% plot_differences()
wm %>% plot_differences()
### county
load('C:/Users/masan/Desktop/IRS/data_county.RDa'); data = data_county
unique(data$county); summary(data)
(counties_to_remove = data %>% filter(year == 2018, is.na(pop)) %>% pull(county)); length(unique(data$county))
data = data %>% mutate(county = gsub(' County', '', county)) %>% 
  select(year, county, n1, per_income, per_wage, unemployed, edu, old, young, lfp, black, hispanic, pop); unique(data$county)
county_sc = function(treated, exclude, time, period) {
  data %>% filter(!(county %in% exclude)) %>% 
    synthetic_control(outcome = per_wage, 
                      unit = county, 
                      time = year, 
                      i_unit = treated, 
                      i_time = time,
                      generate_placebos=F) %>%
    generate_predictor(time_window = 2017:2018,
                       unemployed = mean(unemployed, na.rm = T),
                       edu = mean(edu, na.rm = T),
                       old = mean(old, na.rm = T),
                       young = mean(young, na.rm = T),
                       lfp = mean(lfp, na.rm= T),
                       black = mean(black, na.rm = T),
                       hispanic = mean(hispanic, na.rm = T)) %>%
    generate_predictor(time_window = 2011, value11 = per_wage) %>% 
    generate_predictor(time_window = 2015, value15 = per_wage) %>% 
    generate_predictor(time_window = 2018, value18 = per_wage) %>% 
    generate_weights(optimization_window = period, sigf_ipop = 4) %>% 
    generate_control()
}
gc = county_sc('Garland', c('Jefferson', 'Crittenden'), 2019, 2011:2018)
cc = county_sc('Crittenden', c('Jefferson', 'Garland'), 2019, 2011:2018)
jc = county_sc('Jefferson', c('Garland', 'Crittenden'), 2020, 2011:2019)
(gc_control = control(gc) %>% mutate(x = paste0(unit, ' (', round(weight, 3), ')')) %>% pull(x))
(cc_control = control(cc) %>% mutate(y = paste0(unit, ' (', round(weight, 3), ')')) %>% pull(y))
(jc_control = control(jc) %>% mutate(z = paste0(unit, ' (', round(weight, 3), ')')) %>% pull(z))
(gc_control = paste(gc_control, collapse = ', '))
(gc_control = gsub('Sc', '\nSC', gc_control))
(jc_control = paste(jc_control, collapse = ', '))
(jc_control = gsub('Pu', '\nPu', jc_control))
(cc_control = paste(cc_control, collapse = ', '))
(cc_control = gsub('Fau', '\nFau', cc_control))
# customzing plot_trends
plot_custom = function (data, time_window = NULL, title) {
  if (!(".meta" %in% colnames(data))) {
    stop("`.meta` column has been removed. `.meta` column needs to be included for `generte_control()` to work.")
  }
  trt_time <- data$.meta[[1]]$treatment_time[1]
  time_index <- data$.meta[[1]]$time_index[1]
  outcome_name <- data$.meta[[1]]$outcome[1]
  if (is.null(time_window)) {
    time_window <- unique(data$.original_data[[1]][[time_index]])
  }
  data %>% grab_synthetic_control(placebo = FALSE) %>% filter(time_unit %in% time_window) %>%
    rename(Synthetic = synth_y,  treated = real_y, year = time_unit) %>%  
    ggplot() + ggtitle(title) +
    geom_vline(xintercept = trt_time, color = "black") +
    scale_y_continuous(name = "", limits = c(25000, 53000)) + 
    scale_x_continuous(name = '', breaks = seq(2011, 2022, 1)) +
    theme_classic() + 
    theme(legend.position = c(0.05, 0.98), 
          legend.justification = c("left", "top"), legend.text = element_text(size = 16),
          legend.background = element_rect(fill = "white", color = "white"), 
          plot.title = element_text(hjust = 0.5, size = 18), 
          plot.caption = element_text(hjust = 0, size = 16)) + 
    guides(color=guide_legend(title=""))
}
p4 = gc %>% plot_custom(title = 'Garland County') + 
  labs(caption = paste('Synthetic Garland:', gc_control)) + 
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic Garland'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'Garland'), linewidth = 1) +
  scale_color_manual(values = c('Garland' = 'black', 'Synthetic Garland' = 'darkgrey'),
                     breaks = c('Garland', 'Synthetic Garland'));p4
p5 = jc %>% plot_custom(title = 'Jefferson County') + 
  labs(caption = paste('Synthetic Jefferson:', jc_control)) + 
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic Jefferson'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'Jefferson'), linewidth = 1) +
  scale_color_manual(values = c('Jefferson' = 'black', 'Synthetic Jefferson' = 'darkgrey'),
                     breaks = c('Jefferson', 'Synthetic Jefferson'));p5
p6 = cc %>% plot_custom(title = 'Crittenden County') + 
  labs(caption = paste('Synthetic Crittenden:', cc_control)) + 
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic Crittenden'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'Crittenden'), linewidth = 1) +
  scale_color_manual(values = c('Crittenden' = 'black', 'Synthetic Crittenden' = 'darkgrey'),
                     breaks = c('Crittenden', 'Synthetic Crittenden'));p6
gc %>% plot_differences()
cc %>% plot_differences()
jc %>% plot_differences()
p = (p1 + p4) / (p2 + p5) / (p3 + p6); ggsave(plot = p, filename = 'wage_both.png', width = 15, height=17)
## predictors summary stats
hs_sum = hs %>% grab_balance_table() %>% select(-donor_sample)
pb_sum = pb %>% grab_balance_table() %>% select(-donor_sample)
wm_sum = wm %>% grab_balance_table() 
(sum_stats = hs_sum %>% left_join(pb_sum, by = 'variable') %>% left_join(wm_sum, by = 'variable'))
colnames(sum_stats) = c('Predictors', 'Hot Springs', 'Synthetic<br>Hot Springs', 
                        'Pine Bluff', 'Synthetic<br>Pine Bluff', 
                        'West Memphis', 'Synthetic<br>West Memphis', 'Sample mean')
sum_stats
library(forcats)
desired_order = c('unemployed', 'lfp', 'edu',
                  'young', 'old', 'black', 'hispanic',
                  'value11', 'value15', 'value18')
sum_stats = sum_stats %>% mutate(Predictors = as.factor(Predictors),
                                 Predictors = fct_relevel(Predictors, desired_order)) %>% 
  arrange(Predictors) %>% select(-Predictors)
var_name = c('Unemployment rate', 'Labor force participation rate', 'Share college graduate',
             'Share younger (<15)', 'Share older (>65)',  'Share Black people', 'Share Hispanic people', 
             'Average income in 2011', 'Average income in 2015',  'Average income in 2018')
(summary_table = as.data.frame(cbind(var_name, sum_stats)))
colnames(summary_table)[1] = 'Predictors'
summary_table[,-1] = lapply(summary_table[,-1], function(x) round(x, 1))
writeLines(htmlTable(summary_table, rnames = F), "predictors_city.html")
####
gc_sum = gc %>% grab_balance_table() %>% select(-donor_sample)
jc_sum = jc %>% grab_balance_table() %>% select(-donor_sample)
cc_sum = cc %>% grab_balance_table() 
(sum_stats = gc_sum %>% left_join(jc_sum, by = 'variable') %>% left_join(cc_sum, by = 'variable'))
colnames(sum_stats) = c('Predictors', 'Garland', 'Synthetic<br>Garland', 
                        'Jefferson', 'Synthetic<br>Jefferson', 
                        'Crittenden', 'Synthetic<br>Crittenden', 'Sample mean')
sum_stats
desired_order = c('unemployed', 'lfp', 'edu',
                  'young', 'old', 'black', 'hispanic',
                  'value11', 'value15', 'value18')
sum_stats = sum_stats %>% mutate(Predictors = as.factor(Predictors),
                                 Predictors = fct_relevel(Predictors, desired_order)) %>% 
  arrange(Predictors) %>% select(-Predictors)
var_name = c('Unemployment rate', 'Labor force participation rate', 'Share college graduate',
             'Share younger (<15)', 'Share older (>65)',  'Share Black people', 'Share Hispanic people', 
             'Average income in 2011', 'Average income in 2015',  'Average income in 2018')
(summary_table = as.data.frame(cbind(var_name, sum_stats)))
colnames(summary_table)[1] = 'Predictors'
summary_table[,-1] = lapply(summary_table[,-1], function(x) round(x, 1))
writeLines(htmlTable(summary_table, rnames = F), "predictors_county.html")

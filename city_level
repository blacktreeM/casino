if(F){
  key = '60afb8b8550abb1dc40fef1e46bf9c492b1dc98d'
  library(tidycensus); library(dplyr); library(tidyr)
  census_api_key(key, install=T, overwrite = T)
  acs =  function(year){
    get_acs(geography = "place", state = "AR",
            variables = c(income = 'B19013_001', employed = 'B23025_004', unemployed = 'B23025_005',
                          pop = 'B03002_001', black = 'B03002_004', hispanic = 'B03002_012', 
                          male = 'B15002_002', ns1 = 'B15002_003',
                          ns2 = 'B15002_004', ns3 = 'B15002_005',
                          ns4 = 'B15002_006', ns5 = 'B15002_007', 
                          ns6 = 'B15002_008', ns7 = 'B15002_009',
                          ns8 = 'B15002_010', collegeM = 'B15002_015',
                          masterM = 'B15002_016', profM = 'B15002_017',
                          doctorM = 'B15002_018', 
                          female = 'B15002_019', nsf1 = 'B15002_020',
                          nsf2 = 'B15002_021', nsf3 = 'B15002_022',
                          nsf4 = 'B15002_023', nsf5 = 'B15002_024', 
                          nsf6 = 'B15002_025', nsf7 = 'B15002_026',
                          nsf8 = 'B15002_027', collegeF = 'B15002_032',
                          masterF = 'B15002_033', profF = 'B15002_034',
                          doctorF = 'B15002_035',
                          pop16 = 'DP03_0001',
                          lf = 'DP03_0003',
                          pop_foreign = 'DP02_0088',
                          foreign = 'DP02_0094',
                          men = 'DP02_0025',
                          men_marry = 'DP02_0027',
                          women = 'DP02_0031',
                          women_marry = 'DP02_0033',
                          age_pop = 'DP05_0001',
                          old = 'DP05_0024',
                          young = 'DP05_0019',
                          median_age = 'DP05_0018'),
            year = year)  %>% select(-moe) %>% 
      rename('fips' = 'GEOID', 'city' = 'NAME') %>% 
      pivot_wider(names_from = variable, values_from = estimate)%>% 
      mutate(fips = as.numeric(fips), 
             edu = 100*(collegeM + masterM + profM + doctorM+collegeF + masterF + profF +  doctorF)/(male+female),
             drop=100*(ns1+ns2+ns3+ns4+ns5+ns6+ns7+ns8+nsf1+nsf2+nsf3+nsf4+nsf5+nsf6+nsf7+nsf8)/(male+female),
             edu_male = 100*(collegeM + masterM + profM + doctorM)/male,
             edu_female = 100*(collegeF + masterF + profF +  doctorF)/female,
             drop_male = 100*(ns1+ns2+ns3+ns4+ns5+ns6+ns7+ns8)/male,
             drop_female = 100*(nsf1+nsf2+nsf3+nsf4+nsf5+nsf6+nsf7+nsf8)/female) %>% 
      mutate(men_married = 100*men_marry/men,
             women_married = 100*women_marry/women,
             young = 100*young/age_pop, old = 100*old/age_pop,
             lfp = 100*lf/pop16, 
             foreign = 100*foreign/pop_foreign,
             black = 100*black/pop, hispanic = 100*hispanic/pop,
             unemployed = 100*unemployed / (employed + unemployed),
             year = year)
  }
  acs16 = acs(2016)
  acs17 = acs(2017)
  acs18 = acs(2018)
  acs = rbind(acs17, acs18) # 2016 acs different variables
  acs = acs %>% mutate(city = gsub(', Arkansas', '', city), city = gsub(' city| town', '', city)); unique(acs$city)
  acs %>% arrange(desc(pop)) %>% select(city, pop) %>% print(n=30)
  ################
  link = 'https://files.zillowstatic.com/research/public_csvs/zhvi/City_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv?t=1753627718'
  zillow = read.csv(link)
  head(zillow[,c(1:9, ncol(zillow))])
  zillow = subset(zillow, State == 'AR')
  zillow = zillow[, c(1, 3, 9:ncol(zillow))]
  head(zillow)
  zillow = pivot_longer(zillow, cols = starts_with("X"), names_to = "date", 
                        values_to = "housing", names_prefix = "X") %>% 
    mutate(city = RegionName, fips = RegionID, year = substr(date, 1, 4)) 
  zillow = zillow %>% group_by(city, year) %>% 
    summarise(housing = mean(housing, na.rm = T), .groups = 'drop'); subset(zillow, city=='Russellville')
  intersect(unique(zillow$city), unique(acs$city))
  df = zillow %>% mutate(year = as.numeric(year)) %>% left_join(acs, by = c('city', 'year'))
  save(df, file = 'casino_housing.RDa')
}
##########################################
library(tidysynth); library(ggplot2); library(htmlTable); library(dplyr); library(tidyr); library(patchwork)
#### Arkansas
link = 'https://files.zillowstatic.com/research/public_csvs/zhvi/State_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv'
ar = read.csv(link)
head(ar[,c(1:9, ncol(ar))])
ar = subset(ar, RegionName == 'Arkansas')
ar = ar[, 1:ncol(ar)]
ar = pivot_longer(ar, cols = starts_with("X"), names_to = "date", 
                  values_to = "housing", names_prefix = "X") %>% 
  mutate(city = RegionName, fips = RegionID, year = substr(date, 1, 4)) 
ar = ar %>% group_by(year) %>% 
  summarise(housing = mean(housing, na.rm = T), .groups = 'drop') %>% ungroup() %>% filter(year>=2012); head(ar)
ar$city = 'Arkansas'; tail(ar)
ar$year = as.numeric(ar$year)
#################
load('casino_housing.RDa'); table(df$year); subset(df, city=='Russellville')
length(unique(df$city)); df %>% filter(year==2018) %>% arrange(pop) %>% select(city, pop) %>% head()
df = df %>% filter(year >= 2012) %>% group_by(city) %>% filter(!any(is.na(housing))) %>% ungroup()
(top50 = df %>% filter(year==2018 & !(city %in% c('Hot Springs', 'Pine Bluff', 'West Memphis'))) %>% 
    arrange(desc(pop)) %>% select(city) %>% head(49)) # to make it 49 control + 1 treated = 50
df = df %>% filter(city %in% top50$city | city %in% c('Hot Springs', 'Pine Bluff', 'West Memphis')) %>% 
  select(year, city, housing, income, unemployed, edu, old, young, lfp, black, hispanic, pop); unique(df$city)
df %>% filter(city == 'Russellville') 
df %>% filter(year==2018) %>% arrange(pop) %>% select(city, pop) %>% head()
df %>% filter(year==2018) %>% arrange(desc(pop)) %>% head()
df %>% filter(year==2018) %>% filter(city %in% c('Hot Springs', 'Pine Bluff', 'West Memphis')) %>% select(city, pop)
#used = c('income', 'unemployed', 'edu', 'old', 'young', 'lfp', 'black', 'hispanic', 'pop')
#df = df %>% group_by(city) %>% mutate(across(all_of(used), ~mean(., na.rm = TRUE))) %>% ungroup()
table(df$city)
city = function(treated, exclude, time, period, placebo) {
  df %>% filter(!(city %in% exclude)) %>% 
    synthetic_control(outcome = housing, 
                      unit = city, 
                      time = year, 
                      i_unit = treated, 
                      i_time = time,
                      generate_placebos=placebo) %>%
    generate_predictor(time_window = 2017:2018,
                       income = mean(income, na.rm = T),
                       unemployed = mean(unemployed, na.rm = T),
                       edu = mean(edu, na.rm = T),
                       old = mean(old, na.rm = T),
                       young = mean(young, na.rm = T),
                       lfp = mean(lfp, na.rm= T),
                       black = mean(black, na.rm = T),
                       hispanic = mean(hispanic, na.rm = T)) %>%
    generate_predictor(time_window = 2013, housing13 = housing) %>% 
    generate_predictor(time_window = 2017, housing17 = housing) %>% 
    generate_weights(optimization_window = period, sigf_ipop = 5) %>% #margin_ipop = .02, bound_ipop = 6
    generate_control()
}
hs = city('Hot Springs', c('Pine Bluff', 'West Memphis'), 2019, 2012:2018, T)
wm = city('West Memphis', c('Pine Bluff', 'Hot Springs'), 2019, 2012:2018, F)
pb = city('Pine Bluff', c('West Memphis', 'Hot Springs'), 2020, 2012:2019, F)
#h = city('Harrison', c('West Memphis', 'Hot Springs', 'Pine Bluff'), 2020, 2012:2019)
# customzing plot_trends
plot_custom = function (data, time_window = NULL, title) {
  if (!(".meta" %in% colnames(data))) {
    stop("`.meta` column has been removed. `.meta` column needs to be included for `generte_control()` to work.")
  }
  trt_time <- data$.meta[[1]]$treatment_time[1]
  time_index <- data$.meta[[1]]$time_index[1]
  outcome_name <- data$.meta[[1]]$outcome[1]
  if (is.null(time_window)) {
    time_window <- unique(data$.original_data[[1]][[time_index]])
  }
  data %>% grab_synthetic_control(placebo = FALSE) %>% dplyr::filter(time_unit %in% time_window) %>%
    dplyr::rename(Synthetic = synth_y,  treated = real_y, year = time_unit) %>%  
    ggplot() + ggtitle(title) +
    geom_vline(xintercept = trt_time, color = "black") +
    scale_y_continuous(name = "", expand=c(0,0), limits = c(0, 251000)) + 
    scale_x_continuous(name = '', breaks = seq(2012, 2025, 1)) +
    theme_classic() + theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + 
    guides(color=guide_legend(title=""))
}; hs %>% plot_custom(title = 'Hot Springs')
p1 = hs %>% plot_custom(title = 'Hot Springs') + 
  geom_line(data = ar, linetype = 'dotted', aes(x = year, y = housing, color = 'Arkansas'), linewidth = 1)+
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic Hot Springs'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'Hot Springs'), linewidth = 1) +
  scale_color_manual(values = c('Hot Springs' = 'black', 'Synthetic Hot Springs' = 'darkgrey', 'Arkansas' = 'black'));p1
p2 = pb %>% plot_custom(title = 'Pine Bluff') + 
  geom_line(data = ar, linetype = 'dotted', aes(x = year, y = housing, color = 'Arkansas'), linewidth = 1)+
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic Pine Bluff'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'Pine Bluff'), linewidth = 1) +
  scale_color_manual(values = c('Pine Bluff' = 'black', 'Synthetic Pine Bluff' = 'darkgrey', 'Arkansas' = 'black'));p2
p3 = wm %>% plot_custom(title = 'West Memphis') + 
  geom_line(data = ar, linetype = 'dotted', aes(x = year, y = housing, color = 'Arkansas'), linewidth = 1)+
  geom_line(aes(x=year, y = Synthetic, color = 'Synthetic West Memphis'), linewidth = 1) + 
  geom_line(aes(x=year, y = treated, color = 'West Memphis'), linewidth = 1) +
  scale_color_manual(values = c('West Memphis' = 'black', 'Synthetic West Memphis' = 'darkgrey', 'Arkansas' = 'black'));p3
df %>% filter(city == 'Pine Bluff' | city == 'Forrest City') %>% select(year, city, housing) %>% 
  filter(year>=2012) %>% ggplot(aes(y=housing, x=year, group=city)) + geom_line() + 
  scale_y_continuous(limits = c(0, 250000)) + theme_classic()
p = p1/p2/p3
ggsave(plot = p, filename = 'plot_city.png', width = 7, height=12)
# custome_ratio
hs %>% plot_mspe_ratio()
ratio_custom = function (data, time_window = NULL) {
  data %>% grab_significance(time_window = time_window) %>% 
    dplyr::mutate(unit_name = forcats::fct_reorder(as.character(unit_name), mspe_ratio)) %>% 
    ggplot(aes(unit_name, mspe_ratio, fill = type)) + geom_col() + 
    coord_flip() + ggplot2::labs(y = "Post-Period MSPE / Pre-Period MSPE", 
                                 x = "", fill = "", color = "") + 
    scale_fill_manual(values = c("grey50", "black")) + 
    scale_color_manual(values = c("grey50", "black")) + 
    scale_y_continuous(expand = c(0, 0)) +
    theme(panel.grid.major = element_line(colour = "gray80") ,
          panel.grid.minor = element_line(colour = "gray90"), 
          panel.background = element_blank(), axis.line.x = element_line(colour = "black"), 
          axis.line.y = ggplot2::element_line(colour = "black"), 
          axis.text.y = ggplot2::element_text(colour = "black"), 
          axis.text.x = ggplot2::element_text(colour = "black")) +
    theme_classic() +theme(legend.position = "none") 
}; (placebo = hs %>% ratio_custom())
ggsave(placebo, file='placebo_city.png', height=8, width=6)
### custom plot_placebo
hs %>% plot_placebos(prune=T)
placebo_custom = function (data, time_window = NULL, prune = TRUE) {
  if (!(".meta" %in% colnames(data))) {
    stop("`.meta` column has been removed. `.meta` column needs to be included for `generte_control()` to work.")
  }
  trt_time <- data$.meta[[1]]$treatment_time[1]
  time_index <- data$.meta[[1]]$time_index[1]
  treatment_unit <- data$.meta[[1]]$treatment_unit[1]
  unit_index <- data$.meta[[1]]$unit_index[1]
  outcome_name <- data$.meta[[1]]$outcome[1]
  if (is.null(time_window)) {
    time_window <- unique(data$.original_data[[1]][[time_index]])
  }
  plot_data <- data %>% grab_synthetic_control(placebo = TRUE) %>% 
    dplyr::mutate(diff = real_y - synth_y) %>% dplyr::filter(time_unit %in% time_window) %>% 
    dplyr::mutate(type_text = ifelse(.placebo == 0, treatment_unit, "control units"), type_text = factor(type_text, levels = c(treatment_unit, "control units")))
  caption <- ""
  if (prune) {
    sig_data = data %>% grab_significance(time_window = time_window)
    thres <- sig_data %>% dplyr::filter(type == "Treated") %>% 
      dplyr::pull(pre_mspe) %>% sqrt(.)
    retain_ <- sig_data %>% dplyr::select(unit_name, pre_mspe) %>% 
      dplyr::filter(sqrt(pre_mspe) <= thres * 2) %>% dplyr::pull(unit_name)
    plot_data <- plot_data %>% dplyr::filter(.id %in% retain_)
    caption <- "Pruned all placebo cases with a pre-period RMSPE exceeding two times the treated unit's pre-period RMSPE."
  }
  plot_data %>% ggplot(aes(time_unit, diff, group = .id, color = type_text, alpha = type_text, size = type_text)) + 
    geom_hline(yintercept = 0, color = "black",linetype = 2) + 
    geom_vline(xintercept = trt_time, color = "black", linetype = 3) + geom_line() + 
    scale_color_manual(values = c("black", "grey60")) + 
    scale_alpha_manual(values = c(1, 0.4)) + 
    scale_size_manual(values = c(1, 0.5)) + 
    labs(color = "", alpha = "", size = "", y = '', x = '', 
         title = paste0("Difference of each '", unit_index, "' in the donor pool"), caption = caption) + 
    theme_classic()  + theme(legend.position = "bottom") +
    scale_x_continuous(name = '', breaks = seq(2012, 2025, 1)) 
}; (gap = hs %>% placebo_custom(prune = T))
ggsave(gap, file='gap_city.png', height=4, width=6)
##############
hs %>% plot_weights()
control = function(data){
  bind_rows(grab_unit_weights(data, placebo = FALSE) %>% 
              mutate(type = "Control Unit Weights (W)"), grab_predictor_weights(data,placebo = FALSE) %>% 
              rename(unit = variable)) %>% arrange(desc(weight)) %>% 
    mutate(unit = forcats::fct_reorder(unit, weight)) %>% filter(type!= "Variable Weights (V)") %>%
    select(-type) %>% filter(weight>0.001)
}; control(hs)
(hs_control = control(hs) %>% mutate(x = paste0(unit, ' (', round(weight, 3), ')')) %>% select(x) %>% 
    mutate(id = 1:n()))
(pb_control = control(pb) %>% mutate(y = paste0(unit, ' (', round(weight, 3), ')')) %>% select(y) %>% 
    mutate(id = 1:n()))
(wm_control = control(wm) %>% mutate(z = paste0(unit, ' (', round(weight, 3), ')')) %>% select(z) %>% 
    mutate(id = 1:n()))
(controls = hs_control %>% full_join(pb_control, by = 'id') %>% full_join(wm_control, by = 'id') %>% select(-id))
colnames(controls) = c('Synthetic<br>Hot Springs', 'Synthetic<br>Pine Bluff', 'Synthetic<br>West Memphis')
controls
writeLines(htmlTable(controls, rnames = F), "controls_city.html")
## predictors summary stats
hs_sum = hs %>% grab_balance_table() %>% select(-donor_sample)
pb_sum = pb %>% grab_balance_table() %>% select(-donor_sample)
wm_sum = wm %>% grab_balance_table() 
sum_stats = hs_sum %>% left_join(pb_sum, by = 'variable') %>% left_join(wm_sum, by = 'variable')
colnames(sum_stats) = c('Predictors', 'Hot Springs', 'Synthetic<br>Hot Springs', 
                        'Pine Bluff', 'Synthetic<br>Pine Bluff', 
                        'West Memphis', 'Synthetic<br>West Memphis', 'Sample mean')
sum_stats
library(forcats)
desired_order = c('income', 'unemployed', 'lfp', 'edu',
                  'young', 'old', 'black', 'hispanic',
                  'housing13', 'housing17')
sum_stats = sum_stats %>% mutate(Predictors = as.factor(Predictors),
                                 Predictors = fct_relevel(Predictors, desired_order)) %>% 
  arrange(Predictors) %>% select(-Predictors)
var_name = c('Median household income', 'Unemployment rate', 'Labor force participation rate', 'Share college graduate',
            'Share young (<15)', 'Share old (>65)',  'Share Black people', 'Share Hispanic people', 
             'Median house price in 2013', 'Median house price in 2017')
(summary_table = as.data.frame(cbind(var_name, sum_stats)))
colnames(summary_table)[1] = 'Predictors'
summary_table[,-1] = lapply(summary_table[,-1], function(x) round(x, 1))
writeLines(htmlTable(summary_table, rnames = F), "predictors_city.html")
